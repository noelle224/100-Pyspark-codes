# -*- coding: utf-8 -*-
"""7. Minimum temperature with data frames

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hIu-vTnzlrHZnQItey_HOKtW-pR8Y-l_
"""

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('df-minimum-temperatures').getOrCreate()

"""- Minimum temperature



"""

class Solution:
  def __init__(self):
    self.path = '/content/1800.csv'

  def readcsv(self):
    df = spark.read.text(self.path)
    return df

  def extract_cols(self, df):
    from pyspark.sql.functions import split, col, size, max
    df = df.withColumn('arrays', split(df.value, ','))
    max_array_size = df.select(max(size(col('arrays')))).first()[0]
    for i in range(max_array_size):
      df = df.withColumn(f'col_{i}', df.arrays.getItem(i))
    df = df.select(col('col_0'), col('col_1'), col('col_2'), col('col_3'))
    return df

  def rename_cols(self, df):
    df = df.withColumnRenamed('col_0', 'station_id')
    df = df.withColumnRenamed('col_1', 'date')
    df = df.withColumnRenamed('col_2', 'measure_type')
    df = df.withColumnRenamed('col_3', 'temperature')
    return df

  def helper_udf(self, df):
    from pyspark.sql.functions import udf, col
    from pyspark.sql.types import FloatType

    def _celcius_to_faren(temperature):
        if temperature is None:
            return None
        try:
            celcius = float(temperature) * 0.1 # Assuming your temperature is scaled by 10
            faren = celcius * 1.8 + 32
            return faren
        except ValueError:
            return None

    ## registering the udf
    cel_to_faren_udf = udf(_celcius_to_faren, FloatType())
    df = df.withColumn('temperatureF', cel_to_faren_udf(col('temperature')))
    df = df.drop(col('temperature'))
    return df

  def filter_data(self, df):
    df = df.filter(df.measure_type == 'TMIN')
    return df

  def find_minimum(self, df):
    from pyspark.sql.window import Window
    from pyspark.sql.functions import min, row_number, desc, col
    windowspec = Window.partitionBy('station_id').orderBy('temperatureF')
    df = df.withColumn('row_number', row_number().over(windowspec))
    df = df.filter(df.row_number == 1).select(col('station_id'), col('date'), col('temperatureF').alias('temperatureF'))
    return df


Ind_obj = Solution()
df = Ind_obj.readcsv()
df = Ind_obj.extract_cols(df)
df = Ind_obj.rename_cols(df)
df = Ind_obj.helper_udf(df)
df = Ind_obj.filter_data(df)
df = Ind_obj.find_minimum(df)
df.show()