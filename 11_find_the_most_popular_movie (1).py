# -*- coding: utf-8 -*-
"""11. Find the most popular movie

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hIu-vTnzlrHZnQItey_HOKtW-pR8Y-l_
"""

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('Movieratings').getOrCreate()

"""Given a text file, find the most popular movie, extract schema and the data from the text file.




"""

class Solution:
  def __init__(self):
    self.path = '/content/movieratings.txt'

  def readcsv(self):
    df = spark.read.text(self.path)
    return df

  def interpret(self, df):
    from pyspark.sql.functions import split
    arraydf = df.first()
    schema = [col.strip() for col in arraydf.value.split(',')]
    df_without_header = df.filter(df.value != arraydf.value) # Assuming your data is in a column named 'value'
    for i in range(len(schema)):
      df_without_header = df_without_header.withColumn(f'{schema[i]}', split(df_without_header.value, ',').getItem(i))
    df_without_header = df_without_header.drop('value')
    return df_without_header

  def mostpopular(self, df):
    df = df.groupBy('movieId').count()
    df = df.orderBy('count', ascending=False)
    return df

   def movienames(self):
    from pyspark.sql.types import StructType, StructField, StringType, IntegerType
    schema = StructType([
        StructField("movieId", IntegerType(), True),
        StructField("title", StringType(), True)
    ])
    data = [
        [101,'The Matrix'],
        [205,'Fight Club'],
        [310,'The Godfather'],
        [420,'Pulp Fiction'],
        [530,'Schindlers List']  
    ]

    movies_df = spark.createDataFrame(data, schema=schema)
    return movies_df

Ind_obj = Solution()
df = Ind_obj.readcsv()
df = Ind_obj.interpret(df)
df = Ind_obj.mostpopular(df)
movies_df = Ind_obj.movienames()
df = df.join(movies_df, on='movieId', how='inner')
df.show()
